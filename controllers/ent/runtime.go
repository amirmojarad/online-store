// Code generated by entc, DO NOT EDIT.

package ent

import (
	"online-supermarket/controllers/ent/category"
	"online-supermarket/controllers/ent/order"
	"online-supermarket/controllers/ent/product"
	"online-supermarket/controllers/ent/schema"
	"online-supermarket/controllers/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	categoryFields := schema.Category{}.Fields()
	_ = categoryFields
	// categoryDescName is the schema descriptor for name field.
	categoryDescName := categoryFields[0].Descriptor()
	// category.NameValidator is a validator for the "name" field. It is called by the builders before save.
	category.NameValidator = categoryDescName.Validators[0].(func(string) error)
	// categoryDescDescription is the schema descriptor for description field.
	categoryDescDescription := categoryFields[1].Descriptor()
	// category.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	category.DescriptionValidator = categoryDescDescription.Validators[0].(func(string) error)
	// categoryDescThumbnail is the schema descriptor for thumbnail field.
	categoryDescThumbnail := categoryFields[2].Descriptor()
	// category.ThumbnailValidator is a validator for the "thumbnail" field. It is called by the builders before save.
	category.ThumbnailValidator = categoryDescThumbnail.Validators[0].(func(string) error)
	orderFields := schema.Order{}.Fields()
	_ = orderFields
	// orderDescAmmount is the schema descriptor for ammount field.
	orderDescAmmount := orderFields[0].Descriptor()
	// order.AmmountValidator is a validator for the "ammount" field. It is called by the builders before save.
	order.AmmountValidator = orderDescAmmount.Validators[0].(func(float64) error)
	// orderDescDate is the schema descriptor for date field.
	orderDescDate := orderFields[3].Descriptor()
	// order.DefaultDate holds the default value on creation for the date field.
	order.DefaultDate = orderDescDate.Default.(time.Time)
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescCreateDate is the schema descriptor for create_date field.
	productDescCreateDate := productFields[6].Descriptor()
	// product.DefaultCreateDate holds the default value on creation for the create_date field.
	product.DefaultCreateDate = productDescCreateDate.Default.(time.Time)
	// productDescStock is the schema descriptor for stock field.
	productDescStock := productFields[7].Descriptor()
	// product.DefaultStock holds the default value on creation for the stock field.
	product.DefaultStock = productDescStock.Default.(int)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[0].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[3].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(time.Time)
}
