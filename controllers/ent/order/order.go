// Code generated by entc, DO NOT EDIT.

package order

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmmount holds the string denoting the ammount field in the database.
	FieldAmmount = "ammount"
	// FieldShippingAddress holds the string denoting the shipping_address field in the database.
	FieldShippingAddress = "shipping_address"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "products"
	// ProductsInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsInverseTable = "products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "order_products"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "orders"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_orders"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldAmmount,
	FieldShippingAddress,
	FieldEmail,
	FieldDate,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "orders"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"customer_orders",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AmmountValidator is a validator for the "ammount" field. It is called by the builders before save.
	AmmountValidator func(float64) error
	// DefaultDate holds the default value on creation for the "date" field.
	DefaultDate time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusInProgress Status = "in_progress"
	StatusDelivered  Status = "delivered"
	StatusReferred   Status = "referred"
	StatusCanceled   Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusInProgress, StatusDelivered, StatusReferred, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for status field: %q", s)
	}
}
